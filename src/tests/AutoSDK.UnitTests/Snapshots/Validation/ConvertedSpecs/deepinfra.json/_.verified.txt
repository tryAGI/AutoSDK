{
  "openapi": "3.0.3",
  "info": {
    "title": "DeepApi",
    "version": "0.1.0"
  },
  "paths": {
    "/cli/version": {
      "get": {
        "summary": "Cli Version",
        "operationId": "cli_version_cli_version_get",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/me": {
      "get": {
        "summary": "Me",
        "operationId": "me_v1_me_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Me"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Account",
        "operationId": "delete_account_v1_me_delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Me"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Account Update Details",
        "operationId": "account_update_details_v1_me_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Conflict"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/v1/me/emails": {
      "get": {
        "summary": "Account Email Values",
        "operationId": "account_email_values_v1_me_emails_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailsOut"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/me/team_display_name": {
      "post": {
        "summary": "Team Set Display Name",
        "operationId": "team_set_display_name_v1_me_team_display_name_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisplayNameIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Conflict"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/me/rate_limit": {
      "get": {
        "summary": "Account Rate Limit",
        "operationId": "account_rate_limit_v1_me_rate_limit_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitOut"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/me/rate_limit/request": {
      "post": {
        "summary": "Request Rate Limit Increase",
        "operationId": "request_rate_limit_increase_v1_me_rate_limit_request_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RateLimitRequestIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/deploy": {
      "post": {
        "summary": "Deploy Create",
        "operationId": "deploy_create_v1_deploy_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeployModelIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployResult"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Conflict"
          },
          "423": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Locked"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/hf/": {
      "post": {
        "summary": "Deploy Create Hf",
        "operationId": "deploy_create_hf_deploy_hf__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HFModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployResult"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Conflict"
          },
          "423": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Locked"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/llm/gpu_availability": {
      "get": {
        "summary": "Deploy Gpu Availability",
        "operationId": "deploy_gpu_availability_deploy_llm_gpu_availability_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Source"
            }
          },
          {
            "name": "base_model",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Base Model"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployGPUAvailability"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/llm": {
      "post": {
        "summary": "Deploy Create Llm",
        "operationId": "deploy_create_llm_deploy_llm_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeployLLMIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentOut"
                }
              }
            }
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Payment Required"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Conflict"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/deploy/list/": {
      "get": {
        "summary": "Deploy List",
        "operationId": "deploy_list_deploy_list__get",
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "description": "A list of statuses that should be returned, separated by comma. Allowed values in the list are: initializing,deploying,running,failed,deleted",
              "title": "Status",
              "type": "string",
              "nullable": true
            },
            "description": "A list of statuses that should be returned, separated by comma. Allowed values in the list are: initializing,deploying,running,failed,deleted"
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeploymentOut"
                  },
                  "title": "Response Deploy List Deploy List  Get"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/list": {
      "get": {
        "summary": "Deploy List",
        "operationId": "deploy_list_deploy_list_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "description": "A list of statuses that should be returned, separated by comma. Allowed values in the list are: initializing,deploying,running,failed,deleted",
              "title": "Status",
              "type": "string",
              "nullable": true
            },
            "description": "A list of statuses that should be returned, separated by comma. Allowed values in the list are: initializing,deploying,running,failed,deleted"
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeploymentOut"
                  },
                  "title": "Response Deploy List Deploy List Get"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/{deploy_id}": {
      "get": {
        "summary": "Deploy Status",
        "operationId": "deploy_status_deploy__deploy_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "deploy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deploy Id"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentOut"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Deploy Update",
        "operationId": "deploy_update_deploy__deploy_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "deploy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deploy Id"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeployLLMUpdateIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployStatusOut"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Deploy Delete",
        "operationId": "deploy_delete_deploy__deploy_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "deploy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deploy Id"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployDelete"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/{deploy_id}/stats": {
      "get": {
        "summary": "Deploy Stats",
        "operationId": "deploy_stats_deploy__deploy_id__stats_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "deploy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deploy Id"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "start of period, unix ts or \u0027now-5h\u0027, supported units s(ec), m(min), h(our), d(ay), w(eek), M(onth)",
              "title": "From"
            },
            "description": "start of period, unix ts or \u0027now-5h\u0027, supported units s(ec), m(min), h(our), d(ay), w(eek), M(onth)"
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "end of period, unix ts or now-relative, check from, defaults to now",
              "default": "now",
              "title": "To"
            },
            "description": "end of period, unix ts or now-relative, check from, defaults to now"
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentStatsOut"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "410": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Gone"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/{deploy_id}/stats2": {
      "get": {
        "summary": "Deploy Detailed Stats",
        "operationId": "deploy_detailed_stats_deploy__deploy_id__stats2_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "deploy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deploy Id"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "start of period, unix ts or \u0027now-5h\u0027, supported units s, m, h, d, w",
              "title": "From"
            },
            "description": "start of period, unix ts or \u0027now-5h\u0027, supported units s, m, h, d, w"
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "end of period, unix ts or now-relative, check from, defaults to now",
              "default": "now",
              "title": "To"
            },
            "description": "end of period, unix ts or now-relative, check from, defaults to now"
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedDeploymentStatsOut"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "410": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Gone"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/models/private/list": {
      "get": {
        "summary": "Private Models List",
        "operationId": "private_models_list_models_private_list_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelOut"
                  },
                  "title": "Response Private Models List Models Private List Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/lora-model": {
      "post": {
        "summary": "Upload Lora Model",
        "operationId": "upload_lora_model_lora_model_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoraModelUploadIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentOut"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/lora-model/{lora_model_name}": {
      "delete": {
        "summary": "Delete Lora Model",
        "operationId": "delete_lora_model_lora_model__lora_model_name__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "lora_model_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Lora Model Name"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/models/list": {
      "get": {
        "summary": "Models List",
        "operationId": "models_list_models_list_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ModelOut"
                  },
                  "type": "array",
                  "title": "Response Models List Models List Get"
                }
              }
            }
          }
        }
      }
    },
    "/models/{model_name}/versions": {
      "get": {
        "summary": "Model Versions",
        "operationId": "model_versions_models__model_name__versions_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Name"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelVersionOut"
                  },
                  "title": "Response Model Versions Models  Model Name  Versions Get"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/models/{model_name}/publicity": {
      "post": {
        "summary": "Model Publicity",
        "operationId": "model_publicity_models__model_name__publicity_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Name"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelPublicityIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/models/{model_name}/meta": {
      "post": {
        "summary": "Model Meta Update",
        "operationId": "model_meta_update_models__model_name__meta_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Name"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelMetaIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/models/{model_name}": {
      "delete": {
        "summary": "Model Delete",
        "operationId": "model_delete_models__model_name__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Name"
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "delete a particular version, pass \u0027ALL\u0027 to wipe everything",
              "title": "Version"
            },
            "description": "delete a particular version, pass \u0027ALL\u0027 to wipe everything"
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Models Info",
        "operationId": "models_info_models__model_name__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Name"
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Version",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelInfoOut"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/models/featured": {
      "get": {
        "summary": "Models Featured",
        "operationId": "models_featured_models_featured_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ModelOut"
                  },
                  "type": "array",
                  "title": "Response Models Featured Models Featured Get"
                }
              }
            }
          }
        }
      }
    },
    "/models/{model_name}/schema/{variantKey}": {
      "get": {
        "summary": "Model Schema",
        "operationId": "model_schema_models__model_name__schema__variantKey__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Name"
            }
          },
          {
            "name": "variantKey",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SchemaVariantKey"
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Version",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaOut"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "423": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Locked"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/inference/deploy/{deploy_id}": {
      "post": {
        "summary": "Inference Deploy",
        "operationId": "inference_deploy_v1_inference_deploy__deploy_id__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "deploy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deploy Id"
            }
          },
          {
            "name": "x-deepinfra-source",
            "in": "header",
            "required": false,
            "schema": {
              "title": "X-Deepinfra-Source",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "user-agent",
            "in": "header",
            "required": false,
            "schema": {
              "title": "User-Agent",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/inference/{model_name}": {
      "post": {
        "summary": "Inference Model",
        "operationId": "inference_model_v1_inference__model_name__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Name"
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "description": "model version to run inference against",
              "title": "Version",
              "type": "string",
              "nullable": true
            },
            "description": "model version to run inference against"
          },
          {
            "name": "x-deepinfra-source",
            "in": "header",
            "required": false,
            "schema": {
              "title": "X-Deepinfra-Source",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "user-agent",
            "in": "header",
            "required": false,
            "schema": {
              "title": "User-Agent",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "423": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Locked"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/openai/completions": {
      "post": {
        "summary": "Openai Completions",
        "operationId": "openai_completions_v1_openai_completions_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-deepinfra-source",
            "in": "header",
            "required": false,
            "schema": {
              "title": "X-Deepinfra-Source",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "user-agent",
            "in": "header",
            "required": false,
            "schema": {
              "title": "User-Agent",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenAICompletionsIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/openai/files": {
      "get": {
        "summary": "List Files",
        "operationId": "list_files_v1_openai_files_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "after",
            "in": "query",
            "required": false,
            "schema": {
              "title": "After",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "purpose",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Purpose",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Order",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Openai Files",
        "operationId": "openai_files_v1_openai_files_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_openai_files_v1_openai_files_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/openai/batches": {
      "get": {
        "summary": "Retrieve Openai Batches",
        "operationId": "retrieve_openai_batches_v1_openai_batches_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "after",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "After"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Openai Batch",
        "operationId": "create_openai_batch_v1_openai_batches_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenAIBatchesIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIBatch"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/openai/batches/{batch_id}": {
      "get": {
        "summary": "Retrieve Openai Batch",
        "operationId": "retrieve_openai_batch_v1_openai_batches__batch_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Batch Id"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/openai/chat/completions": {
      "post": {
        "summary": "Openai Chat Completions",
        "operationId": "openai_chat_completions_v1_openai_chat_completions_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-deepinfra-source",
            "in": "header",
            "required": false,
            "schema": {
              "title": "X-Deepinfra-Source",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "user-agent",
            "in": "header",
            "required": false,
            "schema": {
              "title": "User-Agent",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenAIChatCompletionsIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/openai/embeddings": {
      "post": {
        "summary": "Openai Embeddings",
        "operationId": "openai_embeddings_v1_openai_embeddings_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-deepinfra-source",
            "in": "header",
            "required": false,
            "schema": {
              "title": "X-Deepinfra-Source",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "user-agent",
            "in": "header",
            "required": false,
            "schema": {
              "title": "User-Agent",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenAIEmbeddingsIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/openai/models": {
      "get": {
        "summary": "Openai Models",
        "operationId": "openai_models_v1_openai_models_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIModelsOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/openai/images/generations": {
      "post": {
        "summary": "Openai Images Generations",
        "description": "Generate image using OpenAI Images API",
        "operationId": "openai_images_generations_v1_openai_images_generations_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-deepinfra-source",
            "in": "header",
            "required": false,
            "schema": {
              "title": "X-Deepinfra-Source",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "user-agent",
            "in": "header",
            "required": false,
            "schema": {
              "title": "User-Agent",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIImagesOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/openai/images/variations": {
      "post": {
        "summary": "Openai Images Variations",
        "description": "Generate a similar image using OpenAI Images Variations API",
        "operationId": "openai_images_variations_v1_openai_images_variations_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-deepinfra-source",
            "in": "header",
            "required": false,
            "schema": {
              "title": "X-Deepinfra-Source",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "user-agent",
            "in": "header",
            "required": false,
            "schema": {
              "title": "User-Agent",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIImagesOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/feedback": {
      "post": {
        "summary": "Submit Feedback",
        "description": "Submit feedback",
        "operationId": "submit_feedback_v1_feedback_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/openai/audio/speech": {
      "post": {
        "summary": "Openai Audio Speech",
        "operationId": "openai_audio_speech_v1_openai_audio_speech_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-deepinfra-source",
            "in": "header",
            "required": false,
            "schema": {
              "title": "X-Deepinfra-Source",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenAITextToSpeechIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/openai/audio/transcriptions": {
      "post": {
        "summary": "Openai Audio Transcriptions",
        "operationId": "openai_audio_transcriptions_v1_openai_audio_transcriptions_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-deepinfra-source",
            "in": "header",
            "required": false,
            "schema": {
              "title": "X-Deepinfra-Source",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_openai_audio_transcriptions_v1_openai_audio_transcriptions_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/openai/audio/translations": {
      "post": {
        "summary": "Openai Audio Translations",
        "operationId": "openai_audio_translations_v1_openai_audio_translations_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-deepinfra-source",
            "in": "header",
            "required": false,
            "schema": {
              "title": "X-Deepinfra-Source",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_openai_audio_translations_v1_openai_audio_translations_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/logs/query": {
      "get": {
        "summary": "Logs Query",
        "description": "Query inference logs.\n* Without timestamps (from/to) returns last \u0060limit\u0060 messages (in last month).\n* With \u0060from\u0060 only, returns first \u0060limit\u0060 messages after \u0060from\u0060 (inclusive).\n* With \u0060to\u0060 only, returns last \u0060limit\u0060 messages before \u0060to\u0060 (inclusive).\n* With both \u0060from\u0060 and \u0060to\u0060, return the first \u0060limit\u0060 messages after \u0060from\u0060, but not later than \u0060to\u0060.\n* \u0060from\u0060 and \u0060to\u0060 should be no more than a month apart.",
        "operationId": "logs_query_v1_logs_query_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "deploy_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "the deploy id to get the logs from",
              "title": "Deploy Id"
            },
            "description": "the deploy id to get the logs from"
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "description": "start of period, in fractional seconds since unix epoch (inclusive)",
              "title": "From",
              "type": "string",
              "nullable": true
            },
            "description": "start of period, in fractional seconds since unix epoch (inclusive)"
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "description": "end of period, in fractional seconds since unix epoch (exclusive)",
              "title": "To",
              "type": "string",
              "nullable": true
            },
            "description": "end of period, in fractional seconds since unix epoch (exclusive)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "how many items to return at most (default 100, in [1, 1000])",
              "default": 100,
              "title": "Limit"
            },
            "description": "how many items to return at most (default 100, in [1, 1000])"
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogQueryOut"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/deployment_logs/query": {
      "get": {
        "summary": "Deployment Logs Query",
        "description": "Query deployment logs.\n* Without timestamps (from/to) returns last \u0060limit\u0060 messages (in last month).\n* With \u0060from\u0060 only, returns first \u0060limit\u0060 messages after \u0060from\u0060 (inclusive).\n* With \u0060to\u0060 only, returns last \u0060limit\u0060 messages before \u0060to\u0060 (inclusive).\n* With both \u0060from\u0060 and \u0060to\u0060, return the first \u0060limit\u0060 messages after \u0060from\u0060, but not later than \u0060to\u0060.\n* \u0060from\u0060 and \u0060to\u0060 should be no more than a month apart.",
        "operationId": "deployment_logs_query_v1_deployment_logs_query_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "deploy_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "the deploy id to get the logs from",
              "title": "Deploy Id"
            },
            "description": "the deploy id to get the logs from"
          },
          {
            "name": "pod_name",
            "in": "query",
            "required": false,
            "schema": {
              "description": "the pod name to get the logs from",
              "title": "Pod Name",
              "type": "string",
              "nullable": true
            },
            "description": "the pod name to get the logs from"
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "description": "start of period, in fractional seconds since unix epoch (inclusive)",
              "title": "From",
              "type": "string",
              "nullable": true
            },
            "description": "start of period, in fractional seconds since unix epoch (inclusive)"
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "description": "end of period, in fractional seconds since unix epoch (exclusive)",
              "title": "To",
              "type": "string",
              "nullable": true
            },
            "description": "end of period, in fractional seconds since unix epoch (exclusive)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "how many items to return at most (default 100, in [1, 1000])",
              "default": 100,
              "title": "Limit"
            },
            "description": "how many items to return at most (default 100, in [1, 1000])"
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentLogQueryOut"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/voices": {
      "get": {
        "summary": "Get Voices",
        "description": "Get available voices for a given user",
        "operationId": "get_voices_v1_voices_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetVoicesOut"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/text-to-speech/{voice_id}/stream": {
      "post": {
        "summary": "Text To Speech Stream",
        "operationId": "text_to_speech_stream_v1_text_to_speech__voice_id__stream_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "voice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Voice Id"
            }
          },
          {
            "name": "output_format",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Output Format",
              "type": "string",
              "nullable": true
            },
            "example": "wav"
          },
          {
            "name": "x-deepinfra-source",
            "in": "header",
            "required": false,
            "schema": {
              "title": "X-Deepinfra-Source",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElevenLabsTextToSpeechIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/text-to-speech/{voice_id}": {
      "post": {
        "summary": "Text To Speech",
        "operationId": "text_to_speech_v1_text_to_speech__voice_id__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "voice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Voice Id"
            }
          },
          {
            "name": "output_format",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Output Format",
              "type": "string",
              "nullable": true
            },
            "example": "wav"
          },
          {
            "name": "x-deepinfra-source",
            "in": "header",
            "required": false,
            "schema": {
              "title": "X-Deepinfra-Source",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElevenLabsTextToSpeechIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/voices/{voice_id}": {
      "get": {
        "summary": "Get Voice",
        "description": "Get a voice by its id",
        "operationId": "get_voice_v1_voices__voice_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "voice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Voice Id"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Voice"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Voice",
        "operationId": "delete_voice_v1_voices__voice_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "voice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Voice Id"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/voices/add": {
      "post": {
        "summary": "Create Voice",
        "description": "Create a new voice",
        "operationId": "create_voice_v1_voices_add_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_voice_v1_voices_add_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Voice"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/voices/{voice_id}/edit": {
      "post": {
        "summary": "Update Voice",
        "operationId": "update_voice_v1_voices__voice_id__edit_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "voice_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Voice Id"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_voice_v1_voices__voice_id__edit_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Voice"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/lora/create": {
      "post": {
        "summary": "Create Lora",
        "operationId": "create_lora_v1_lora_create_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLoraApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/lora/{lora_name}/status": {
      "get": {
        "summary": "Get Lora Status",
        "operationId": "get_lora_status_v1_lora__lora_name__status_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "lora_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Lora Name"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/lora/{lora_name}": {
      "get": {
        "summary": "Get Lora",
        "operationId": "get_lora_v1_lora__lora_name__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "lora_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Lora Name"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update Lora",
        "operationId": "update_lora_v1_lora__lora_name__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "lora_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Lora Name"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLoraApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Lora",
        "operationId": "delete_lora_v1_lora__lora_name__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "lora_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Lora Name"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/model/{model_name}/loras": {
      "get": {
        "summary": "Get Model Loras",
        "operationId": "get_model_loras_v1_model__model_name__loras_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Name"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/loras": {
      "get": {
        "summary": "Get User Loras",
        "operationId": "get_user_loras_v1_user_loras_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/github/login": {
      "get": {
        "summary": "Github Login",
        "description": "Initiate github SSO login flow. Callback is /github/callback",
        "operationId": "github_login_github_login_get",
        "parameters": [
          {
            "name": "login_id",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Login Id",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "origin",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Origin",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "deal",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Deal",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "ti_token",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Ti Token",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/okta/login": {
      "get": {
        "summary": "Okta Login",
        "operationId": "okta_login_okta_login_get",
        "parameters": [
          {
            "name": "team_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Team Id"
            }
          },
          {
            "name": "origin",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Origin",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "login_id",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Login Id",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/github/cli/login": {
      "get": {
        "summary": "Github Cli Login",
        "description": "deepctl is calling this request waiting for auth token during login.\nThe token is stored in /github/callback",
        "operationId": "github_cli_login_github_cli_login_get",
        "parameters": [
          {
            "name": "login_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Login Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/api-tokens": {
      "get": {
        "summary": "Get Api Tokens",
        "operationId": "get_api_tokens_v1_api_tokens_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiToken"
                  },
                  "title": "Response Get Api Tokens V1 Api Tokens Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Api Token",
        "operationId": "create_api_token_v1_api_tokens_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTokenIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiToken"
                }
              }
            }
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Conflict"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/api-tokens/{api_token}": {
      "get": {
        "summary": "Get Api Token",
        "operationId": "get_api_token_v1_api_tokens__api_token__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Api Token"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiToken"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Api Token",
        "operationId": "delete_api_token_v1_api_tokens__api_token__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Api Token"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/api-tokens/{api_token}/vercel_export": {
      "post": {
        "summary": "Export Api Token To Vercel",
        "operationId": "export_api_token_to_vercel_v1_api_tokens__api_token__vercel_export_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Api Token"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTokenVercelExportIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepError"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/scoped-jwt": {
      "post": {
        "summary": " Create Scoped Jwt",
        "operationId": "_create_scoped_jwt_v1_scoped_jwt_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScopedJWTIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopedJWTOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Inspect Scoped Jwt",
        "operationId": "inspect_scoped_jwt_v1_scoped_jwt_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "jwtoken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Jwtoken"
            }
          },
          {
            "name": "xi-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "title": "Xi-Api-Key",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InspectScopedJWTOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/payment/checklist": {
      "get": {
        "summary": "Get Checklist",
        "operationId": "get_checklist_payment_checklist_get",
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "schema": {
              "type": "String"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checklist"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/payment/config": {
      "get": {
        "summary": "Get Config",
        "operationId": "get_config_payment_config_get",
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "schema": {
              "type": "String"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "summary": "Set Config",
        "operationId": "set_config_payment_config_post",
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "schema": {
              "type": "String"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/payment/billing-portal": {
      "get": {
        "summary": "Billing Portal",
        "operationId": "billing_portal_payment_billing_portal_get",
        "parameters": [
          {
            "name": "return_url",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Return Url",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "schema": {
              "type": "String"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingPortalOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/payment/usage": {
      "get": {
        "summary": "Usage",
        "operationId": "usage_payment_usage_get",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "start of period, YYYY.MM or current(-N) format",
              "title": "From"
            },
            "description": "start of period, YYYY.MM or current(-N) format"
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "description": "end of period (if missing a single month marked by from is return), same format as from",
              "title": "To",
              "type": "string",
              "nullable": true
            },
            "description": "end of period (if missing a single month marked by from is return), same format as from"
          },
          {
            "name": "session",
            "in": "cookie",
            "schema": {
              "type": "String"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/payment/usage/{api_token}": {
      "get": {
        "summary": "Usage Api Token",
        "operationId": "usage_api_token_payment_usage__api_token__get",
        "parameters": [
          {
            "name": "api_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Api Token"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "start of period, YYYY.MM or current(-N) format",
              "title": "From"
            },
            "description": "start of period, YYYY.MM or current(-N) format"
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "description": "end of period (if missing a single month marked by from is return), same format as from",
              "title": "To",
              "type": "string",
              "nullable": true
            },
            "description": "end of period (if missing a single month marked by from is return), same format as from"
          },
          {
            "name": "session",
            "in": "cookie",
            "schema": {
              "type": "String"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/payment/deepstart/application": {
      "post": {
        "summary": "Deepstart Apply",
        "operationId": "deepstart_apply_payment_deepstart_application_post",
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "schema": {
              "type": "String"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeepStartApplicationIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeepStartApplicationOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/payment/funds": {
      "post": {
        "summary": "Add Funds",
        "operationId": "add_funds_payment_funds_post",
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "schema": {
              "type": "String"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddFundsIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AddFundsIn": {
        "properties": {
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "Amount to add in cents"
          }
        },
        "type": "object",
        "required": [
          "amount"
        ],
        "title": "AddFundsIn"
      },
      "BillingPortalOut": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "BillingPortalOut"
      },
      "Checklist": {
        "properties": {
          "email": {
            "type": "boolean",
            "title": "Email",
            "default": false
          },
          "billing_address": {
            "type": "boolean",
            "title": "Billing Address",
            "default": false
          },
          "payment_method": {
            "type": "boolean",
            "title": "Payment Method",
            "default": false
          },
          "suspended": {
            "type": "boolean",
            "title": "Suspended",
            "default": false
          },
          "overdue_invoices": {
            "type": "number",
            "title": "Overdue Invoices",
            "default": 0.0
          },
          "last_checked": {
            "type": "integer",
            "title": "Last Checked",
            "default": 0
          },
          "stripe_balance": {
            "type": "number",
            "title": "Stripe Balance",
            "description": "Negative value indicates funds ready-to-spend. Positive value indicates money owed"
          },
          "limit": {
            "title": "Limit",
            "type": "number",
            "nullable": true
          },
          "suspend_reason": {
            "type": null,
            "nullable": true,
            "$ref": "#/components/schemas/SuspendReason"
          }
        },
        "type": "object",
        "required": [
          "stripe_balance",
          "limit",
          "suspend_reason"
        ],
        "title": "Checklist"
      },
      "ConfigIn": {
        "properties": {
          "limit": {
            "title": "Limit",
            "description": "Set usage limit (in USD). Negative means no limit.null/not-set means don\u0027t change it",
            "type": "number",
            "nullable": true
          }
        },
        "type": "object",
        "title": "ConfigIn"
      },
      "ConfigOut": {
        "properties": {
          "limit": {
            "type": "number",
            "title": "Limit",
            "description": "Spending limit (in USD). Negative means no limit"
          }
        },
        "type": "object",
        "required": [
          "limit"
        ],
        "title": "ConfigOut"
      },
      "DeepStartApplicationIn": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "uid": {
            "title": "Uid",
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "title": "Company"
          },
          "ceo": {
            "type": "string",
            "title": "Ceo"
          },
          "funding": {
            "type": "string",
            "title": "Funding"
          },
          "founded_on": {
            "type": "string",
            "title": "Founded On"
          },
          "website": {
            "type": "string",
            "title": "Website"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "default": "pending"
          },
          "deal": {
            "title": "Deal",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "company",
          "ceo",
          "funding",
          "founded_on",
          "website"
        ],
        "title": "DeepStartApplicationIn"
      },
      "DeepStartApplicationOut": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "uid": {
            "title": "Uid",
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "title": "Company"
          },
          "ceo": {
            "type": "string",
            "title": "Ceo"
          },
          "funding": {
            "type": "string",
            "title": "Funding"
          },
          "founded_on": {
            "type": "string",
            "title": "Founded On"
          },
          "website": {
            "type": "string",
            "title": "Website"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "default": "pending"
          },
          "deal": {
            "title": "Deal",
            "type": "string",
            "nullable": true
          },
          "email": {
            "title": "Email",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "company",
          "ceo",
          "funding",
          "founded_on",
          "website"
        ],
        "title": "DeepStartApplicationOut"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ModelMeta": {
        "properties": {
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "model_name": {
            "type": "string",
            "title": "Model Name"
          },
          "task": {
            "type": "string",
            "title": "Task"
          },
          "plan_id": {
            "title": "Plan Id",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "provider",
          "model_name",
          "task"
        ],
        "title": "ModelMeta"
      },
      "SuspendReason": {
        "type": "string",
        "enum": [
          "payment-method",
          "overdue-invoices",
          "limit-reached",
          "admin",
          "bad-cc"
        ],
        "title": "SuspendReason"
      },
      "TimeInterval": {
        "properties": {
          "fr": {
            "type": "integer",
            "title": "Fr",
            "default": 0
          },
          "to": {
            "type": "integer",
            "title": "To",
            "default": 4000000000000
          }
        },
        "type": "object",
        "title": "TimeInterval",
        "description": "Inclusive, in ms"
      },
      "UsageItem": {
        "properties": {
          "model": {
            "$ref": "#/components/schemas/ModelMeta"
          },
          "units": {
            "type": "integer",
            "title": "Units",
            "description": "billed seconds or tokens"
          },
          "rate": {
            "type": "number",
            "title": "Rate",
            "description": "rate in cents/sec or cents per token"
          },
          "cost": {
            "type": "integer",
            "title": "Cost",
            "description": "model cost in cents"
          },
          "pricing_type": {
            "type": "string",
            "title": "Pricing Type",
            "description": "pricing type"
          },
          "interval": {
            "$ref": "#/components/schemas/TimeInterval",
            "description": "time interval with this particular pricing"
          }
        },
        "type": "object",
        "required": [
          "model",
          "units",
          "rate",
          "cost",
          "pricing_type",
          "interval"
        ],
        "title": "UsageItem"
      },
      "UsageMonth": {
        "properties": {
          "period": {
            "type": "string",
            "title": "Period",
            "description": "YYYY.MM formatted period"
          },
          "interval": {
            "$ref": "#/components/schemas/TimeInterval",
            "description": "time interval in this period"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/UsageItem"
            },
            "type": "array",
            "title": "Items"
          },
          "total_cost": {
            "type": "integer",
            "title": "Total Cost",
            "description": "total cost for all items in cents"
          },
          "invoice_id": {
            "type": "string",
            "title": "Invoice Id",
            "description": "Stripe Invoice ID, or EMPTY|NOT_FINAL",
            "default": "NOT_FINAL"
          }
        },
        "type": "object",
        "required": [
          "period",
          "interval",
          "items",
          "total_cost"
        ],
        "title": "UsageMonth"
      },
      "UsageOut": {
        "properties": {
          "months": {
            "items": {
              "$ref": "#/components/schemas/UsageMonth"
            },
            "type": "array",
            "title": "Months"
          },
          "initial_month": {
            "type": "string",
            "title": "Initial Month",
            "description": "The first month for this account"
          }
        },
        "type": "object",
        "required": [
          "months",
          "initial_month"
        ],
        "title": "UsageOut"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "ApiToken": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At",
            "description": "creation unix timestamp"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "token",
          "created_at",
          "name"
        ],
        "title": "ApiToken"
      },
      "ApiTokenIn": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "ApiTokenIn"
      },
      "ApiTokenVercelExportIn": {
        "properties": {
          "project_id_or_name": {
            "type": "string",
            "title": "Project Id Or Name"
          },
          "is_sensitive": {
            "type": "boolean",
            "title": "Is Sensitive"
          },
          "env_development": {
            "type": "boolean",
            "title": "Env Development"
          },
          "env_preview": {
            "type": "boolean",
            "title": "Env Preview"
          },
          "env_production": {
            "type": "boolean",
            "title": "Env Production"
          }
        },
        "type": "object",
        "required": [
          "project_id_or_name",
          "is_sensitive",
          "env_development",
          "env_preview",
          "env_production"
        ],
        "title": "ApiTokenVercelExportIn"
      },
      "Body_create_voice_v1_voices_add_post": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "files"
        ],
        "title": "Body_create_voice_v1_voices_add_post"
      },
      "Body_openai_audio_transcriptions_v1_openai_audio_transcriptions_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "language": {
            "title": "Language",
            "type": "string",
            "nullable": true
          },
          "prompt": {
            "title": "Prompt",
            "type": "string",
            "nullable": true
          },
          "response_format": {
            "title": "Response Format",
            "default": "json",
            "type": "string",
            "nullable": true,
            "enum": [
              "json",
              "verbose_json",
              "text",
              "srt",
              "vtt"
            ]
          },
          "temperature": {
            "title": "Temperature",
            "default": 0,
            "type": "number",
            "nullable": true
          },
          "timestamp_granularities": {
            "title": "Timestamp Granularities",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "enum": [
                "segment",
                "word"
              ]
            }
          }
        },
        "type": "object",
        "required": [
          "file",
          "model"
        ],
        "title": "Body_openai_audio_transcriptions_v1_openai_audio_transcriptions_post"
      },
      "Body_openai_audio_translations_v1_openai_audio_translations_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "prompt": {
            "title": "Prompt",
            "type": "string",
            "nullable": true
          },
          "response_format": {
            "title": "Response Format",
            "default": "json",
            "type": "string",
            "nullable": true,
            "enum": [
              "json",
              "verbose_json",
              "text",
              "srt",
              "vtt"
            ]
          },
          "temperature": {
            "title": "Temperature",
            "default": 0,
            "type": "number",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "file",
          "model"
        ],
        "title": "Body_openai_audio_translations_v1_openai_audio_translations_post"
      },
      "Body_openai_files_v1_openai_files_post": {
        "properties": {
          "purpose": {
            "type": "string",
            "title": "Purpose"
          },
          "file": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "purpose",
          "file"
        ],
        "title": "Body_openai_files_v1_openai_files_post"
      },
      "Body_update_voice_v1_voices__voice_id__edit_post": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description"
        ],
        "title": "Body_update_voice_v1_voices__voice_id__edit_post"
      },
      "ChatCompletionAssistantMessage": {
        "properties": {
          "role": {
            "type": "string",
            "title": "Role",
            "description": "the role of the author of this message",
            "default": "assistant",
            "enum": [
              "assistant"
            ]
          },
          "content": {
            "title": "Content",
            "description": "the message content",
            "type": "string",
            "nullable": true
          },
          "name": {
            "title": "Name",
            "type": "string",
            "nullable": true
          },
          "tool_calls": {
            "title": "Tool Calls",
            "description": "the tool calls generated by the mode",
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ChatCompletionMessageToolCall"
            }
          }
        },
        "type": "object",
        "title": "ChatCompletionAssistantMessage"
      },
      "ChatCompletionContentPartAudio": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "enum": [
              "input_audio"
            ]
          },
          "input_audio": {
            "$ref": "#/components/schemas/InputAudio"
          }
        },
        "type": "object",
        "required": [
          "type",
          "input_audio"
        ],
        "title": "ChatCompletionContentPartAudio"
      },
      "ChatCompletionContentPartImage": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "enum": [
              "image_url"
            ]
          },
          "image_url": {
            "$ref": "#/components/schemas/ImageURL"
          }
        },
        "type": "object",
        "required": [
          "type",
          "image_url"
        ],
        "title": "ChatCompletionContentPartImage"
      },
      "ChatCompletionContentPartText": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "enum": [
              "text"
            ]
          },
          "text": {
            "type": "string",
            "title": "Text"
          }
        },
        "type": "object",
        "required": [
          "type",
          "text"
        ],
        "title": "ChatCompletionContentPartText"
      },
      "ChatCompletionMessageToolCall": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "the id of the tool call"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "the type of the tool call. only function is supported currently"
          },
          "function": {
            "$ref": "#/components/schemas/Function",
            "description": "the function that the model called"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "function"
        ],
        "title": "ChatCompletionMessageToolCall"
      },
      "ChatCompletionSystemMessage": {
        "properties": {
          "role": {
            "type": "string",
            "title": "Role",
            "description": "the role of the author of this message",
            "default": "system",
            "enum": [
              "system"
            ]
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/ChatCompletionContentPartText"
                },
                "type": "array"
              }
            ],
            "title": "Content",
            "description": "the message content"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "ChatCompletionSystemMessage"
      },
      "ChatCompletionToolMessage": {
        "properties": {
          "role": {
            "type": "string",
            "title": "Role",
            "description": "the role of the author of this message",
            "default": "tool",
            "enum": [
              "tool"
            ]
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "the message content"
          },
          "tool_call_id": {
            "type": "string",
            "title": "Tool Call Id"
          }
        },
        "type": "object",
        "required": [
          "content",
          "tool_call_id"
        ],
        "title": "ChatCompletionToolMessage"
      },
      "ChatCompletionUserMessage": {
        "properties": {
          "role": {
            "type": "string",
            "title": "Role",
            "description": "the role of the author of this message",
            "default": "user",
            "enum": [
              "user"
            ]
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ChatCompletionContentPartText"
                    },
                    {
                      "$ref": "#/components/schemas/ChatCompletionContentPartImage"
                    },
                    {
                      "$ref": "#/components/schemas/ChatCompletionContentPartAudio"
                    }
                  ]
                },
                "type": "array"
              }
            ],
            "title": "Content",
            "description": "the message content"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "ChatCompletionUserMessage"
      },
      "ChatTools": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "function"
          },
          "function": {
            "$ref": "#/components/schemas/FunctionDefinition"
          }
        },
        "type": "object",
        "required": [
          "function"
        ],
        "title": "ChatTools"
      },
      "CreateLoraApiRequest": {
        "properties": {
          "base_model": {
            "type": "string",
            "title": "Base Model"
          },
          "lora_name": {
            "type": "string",
            "title": "Lora Name"
          },
          "source": {
            "$ref": "#/components/schemas/SourceModel"
          },
          "private": {
            "type": "boolean",
            "title": "Private"
          },
          "description": {
            "title": "Description",
            "default": "",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "base_model",
          "lora_name",
          "source",
          "private"
        ],
        "title": "CreateLoraApiRequest"
      },
      "DeepError": {
        "properties": {
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error",
            "example": "Model not found"
          }
        },
        "type": "object",
        "required": [
          "error"
        ],
        "title": "DeepError"
      },
      "DeployDelete": {
        "properties": {
          "deploy_id": {
            "type": "string",
            "title": "Deploy Id",
            "description": "Deploy Id",
            "example": "fkj843kjh8"
          }
        },
        "type": "object",
        "required": [
          "deploy_id"
        ],
        "title": "DeployDelete"
      },
      "DeployGPUAvailability": {
        "properties": {
          "gpus": {
            "items": {
              "$ref": "#/components/schemas/GPUAvailabilityInfo"
            },
            "type": "array",
            "title": "Gpus",
            "description": "A list of all provided GPUs configurations, including their price and wether they are available"
          }
        },
        "type": "object",
        "required": [
          "gpus"
        ],
        "title": "DeployGPUAvailability"
      },
      "DeployGPUs": {
        "type": "string",
        "enum": [
          "A100-80GB",
          "H100-80GB",
          "H200-141GB",
          "B200-180GB"
        ],
        "title": "DeployGPUs"
      },
      "DeployInstances": {
        "properties": {
          "running": {
            "type": "integer",
            "title": "Running"
          },
          "pending": {
            "type": "integer",
            "title": "Pending"
          }
        },
        "type": "object",
        "required": [
          "running",
          "pending"
        ],
        "title": "DeployInstances"
      },
      "DeployLLMConfig": {
        "properties": {
          "gpu": {
            "$ref": "#/components/schemas/DeployGPUs",
            "description": "The type of GPU the deployment is running on"
          },
          "num_gpus": {
            "type": "integer",
            "title": "Num Gpus",
            "description": "Number of GPUs used by one instance"
          },
          "max_batch_size": {
            "type": "integer",
            "title": "Max Batch Size",
            "description": "Maximum number of concurrent requests"
          },
          "weights": {
            "description": "Model weights information",
            "type": null,
            "nullable": true,
            "$ref": "#/components/schemas/HFWeights"
          }
        },
        "type": "object",
        "required": [
          "gpu",
          "num_gpus",
          "max_batch_size"
        ],
        "title": "DeployLLMConfig"
      },
      "DeployLLMIn": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "model name for deepinfra (username/mode-name format)"
          },
          "gpu": {
            "$ref": "#/components/schemas/DeployGPUs",
            "description": "The GPU you want to run on"
          },
          "num_gpus": {
            "type": "integer",
            "maximum": 8.0,
            "minimum": 1.0,
            "title": "Num Gpus",
            "description": "Number of GPUs you want for this model",
            "default": 1
          },
          "max_batch_size": {
            "type": "integer",
            "maximum": 256.0,
            "minimum": 1.0,
            "title": "Max Batch Size",
            "description": "Maximum number of concurrent requests",
            "default": 96
          },
          "hf": {
            "type": null,
            "nullable": true,
            "$ref": "#/components/schemas/HFWeights"
          },
          "settings": {
            "type": null,
            "nullable": true,
            "$ref": "#/components/schemas/ScaleSettings"
          }
        },
        "type": "object",
        "required": [
          "model_name",
          "gpu"
        ],
        "title": "DeployLLMIn"
      },
      "DeployLLMUpdateIn": {
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/ScaleSettings"
          }
        },
        "type": "object",
        "required": [
          "settings"
        ],
        "title": "DeployLLMUpdateIn"
      },
      "DeployModelIn": {
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/ModelProvider",
            "description": "namespace for the model name",
            "default": "cnt"
          },
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "model name in specified provider"
          },
          "version": {
            "title": "Version",
            "description": "A specific revision, if left empty uses the last one",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "model_name"
        ],
        "title": "DeployModelIn"
      },
      "DeployResult": {
        "properties": {
          "deploy_id": {
            "type": "string",
            "title": "Deploy Id",
            "description": "Deploy Id",
            "example": "fkj843kjh8"
          }
        },
        "type": "object",
        "required": [
          "deploy_id"
        ],
        "title": "DeployResult"
      },
      "DeployStatusOut": {
        "properties": {
          "deploy_id": {
            "type": "string",
            "title": "Deploy Id",
            "description": "Deploy Id",
            "example": "fkj843kjh8"
          }
        },
        "type": "object",
        "required": [
          "deploy_id"
        ],
        "title": "DeployStatusOut"
      },
      "DeployType": {
        "type": "string",
        "enum": [
          "legacy",
          "llm",
          "lora"
        ],
        "title": "DeployType"
      },
      "DeploymentLogEntry": {
        "type": "array",
        "maxItems": 2,
        "minItems": 2,
        "items": {
          "type": "string",
          "title": "Ts",
          "description": "timestamp in fractional seconds since unix epoch (ns precision)"
        }
      },
      "DeploymentLogQueryOut": {
        "properties": {
          "entries": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/DeploymentLogEntry"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Entries",
            "description": "mapping of pod names to log lines ordered by increasing timestamp"
          }
        },
        "type": "object",
        "title": "DeploymentLogQueryOut"
      },
      "DeploymentOut": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DeployType",
            "default": "legacy"
          },
          "deploy_id": {
            "type": "string",
            "title": "Deploy Id",
            "description": "Deploy Id",
            "example": "fkj843kjh8"
          },
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "Model Id from huggingface",
            "example": "google/vit-base-patch16-224"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Model version",
            "example": "d8b79b422843bd59d628bf25b01aded94a9ec1a9b917e69fe460df9ff39ec42b"
          },
          "task": {
            "type": "string",
            "title": "Task",
            "description": "Task",
            "example": "image-classification"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Status",
            "example": "deployed"
          },
          "fail_reason": {
            "type": "string",
            "title": "Fail Reason",
            "description": "Failure reason",
            "example": "Initialization failed"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "Created at",
            "example": "2021-08-27T17:19:21\u002B00:00"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "Updated at",
            "example": "2021-08-27T17:19:21\u002B00:00"
          },
          "instances": {
            "description": "Details about number of instances running right now",
            "type": null,
            "nullable": true,
            "$ref": "#/components/schemas/DeployInstances"
          },
          "config": {
            "description": "Immutable deploy configuration",
            "type": null,
            "nullable": true,
            "$ref": "#/components/schemas/DeployLLMConfig"
          },
          "settings": {
            "description": "Scale Settings",
            "type": null,
            "nullable": true,
            "$ref": "#/components/schemas/ScaleSettings"
          }
        },
        "type": "object",
        "required": [
          "deploy_id",
          "model_name",
          "version",
          "task",
          "status",
          "fail_reason",
          "created_at",
          "updated_at"
        ],
        "title": "DeploymentOut"
      },
      "DeploymentStatsOut": {
        "properties": {
          "requests": {
            "type": "integer",
            "title": "Requests",
            "description": "number of inference requests in the provided interval"
          },
          "total_time": {
            "type": "integer",
            "title": "Total Time",
            "description": "total number of seconds spend in inference"
          },
          "total_tokens": {
            "type": "integer",
            "title": "Total Tokens",
            "description": "total number of tokens generated"
          },
          "input_tokens": {
            "type": "integer",
            "title": "Input Tokens",
            "description": "number of input tokens generated"
          },
          "output_tokens": {
            "type": "integer",
            "title": "Output Tokens",
            "description": "number of output tokens generated"
          },
          "total_amount": {
            "type": "integer",
            "title": "Total Amount",
            "description": "total number of cents spent"
          },
          "avg_time": {
            "type": "number",
            "title": "Avg Time",
            "description": "average millisecond inference time"
          },
          "avg95_time": {
            "type": "number",
            "title": "Avg95 Time",
            "description": "95th percentile inference time (estimated)"
          },
          "errors": {
            "type": "integer",
            "title": "Errors",
            "description": "number of errors"
          }
        },
        "type": "object",
        "required": [
          "requests",
          "total_time",
          "total_tokens",
          "input_tokens",
          "output_tokens",
          "total_amount",
          "avg_time",
          "avg95_time",
          "errors"
        ],
        "title": "DeploymentStatsOut"
      },
      "DetailedDeploymentStatsOut": {
        "properties": {
          "llm": {
            "description": "LLM Deployment Stats",
            "type": null,
            "nullable": true,
            "$ref": "#/components/schemas/LLMDeploymentStatsOut"
          },
          "embeddings": {
            "description": "Embeddings Deployment Stats",
            "type": null,
            "nullable": true,
            "$ref": "#/components/schemas/EmbeddingsDeploymentStatsOut"
          },
          "time": {
            "description": "Time based Deployment Stats",
            "type": null,
            "nullable": true,
            "$ref": "#/components/schemas/TimeDeploymentStatsOut"
          }
        },
        "type": "object",
        "title": "DetailedDeploymentStatsOut"
      },
      "DisplayNameIn": {
        "properties": {
          "display_name": {
            "type": "string",
            "maxLength": 39,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9]\u002B(-[a-zA-Z0-9]\u002B)*$",
            "title": "Display Name",
            "description": "String with length between 1 and 39 characters. Only alphanumeric characters and dashes allowed. Must contain no leading, trailing or consecutive dashes."
          }
        },
        "type": "object",
        "required": [
          "display_name"
        ],
        "title": "DisplayNameIn"
      },
      "ElevenLabsTextToSpeechIn": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Text to convert to speech",
            "example": "I\u0027m beginnin\u0027 to feel like a Rap God, Rap God\nAll my people from the front to the back nod, back nod\nNow, who thinks their arms are long enough to slap box, slap box?\nThey said I rap like a robot, so call me Rap-bot"
          },
          "model_id": {
            "type": "string",
            "title": "Model Id",
            "description": "Model ID to use for the conversion",
            "default": "hexgrad/Kokoro-82M"
          },
          "output_format": {
            "$ref": "#/components/schemas/TtsResponseFormat",
            "description": "Output format for the speech"
          },
          "language_code": {
            "title": "Language Code",
            "description": "ISO 639-1, 2 letter language code",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "text"
        ],
        "title": "ElevenLabsTextToSpeechIn"
      },
      "EmailsOut": {
        "properties": {
          "emails": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Emails",
            "description": "List of emails verified by theauthenticaiton provider"
          }
        },
        "type": "object",
        "required": [
          "emails"
        ],
        "title": "EmailsOut"
      },
      "EmbeddingsDeploymentStatsOut": {
        "properties": {
          "requests": {
            "type": "integer",
            "title": "Requests",
            "description": "number of inference requests in the provided interval"
          },
          "input_tokens": {
            "type": "integer",
            "title": "Input Tokens",
            "description": "number of input tokens generated"
          },
          "avg_tpt_ms": {
            "type": "number",
            "title": "Avg Tpt Ms",
            "description": "average millisecond time per token"
          },
          "avg95_tpt_ms": {
            "type": "number",
            "title": "Avg95 Tpt Ms",
            "description": "95th percentile time per token (estimated)"
          },
          "total_amount_cents": {
            "type": "integer",
            "title": "Total Amount Cents",
            "description": "total number of cents spent"
          },
          "errors": {
            "type": "integer",
            "title": "Errors",
            "description": "number of errors"
          }
        },
        "type": "object",
        "required": [
          "requests",
          "input_tokens",
          "avg_tpt_ms",
          "avg95_tpt_ms",
          "total_amount_cents",
          "errors"
        ],
        "title": "EmbeddingsDeploymentStatsOut"
      },
      "FeedbackIn": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "The message you\u0027d like to send to deepinfra team"
          },
          "contact_email": {
            "title": "Contact Email",
            "description": "Optional contact email to reach you back",
            "type": "string",
            "nullable": true,
            "format": "email"
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "FeedbackIn"
      },
      "Function": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "the name of the function to call"
          },
          "arguments": {
            "type": "string",
            "title": "Arguments",
            "description": "the function arguments, generated by the model in JSON format. the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema"
          }
        },
        "type": "object",
        "required": [
          "name",
          "arguments"
        ],
        "title": "Function"
      },
      "FunctionDefinition": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "nullable": true
          },
          "parameters": {
            "title": "Parameters",
            "type": "object",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "FunctionDefinition"
      },
      "GPUAvailabilityInfo": {
        "properties": {
          "gpu_config": {
            "type": "string",
            "title": "Gpu Config"
          },
          "usd_per_hour": {
            "type": "number",
            "title": "Usd Per Hour"
          },
          "available": {
            "type": "boolean",
            "title": "Available"
          },
          "recommended": {
            "type": "boolean",
            "title": "Recommended",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "gpu_config",
          "usd_per_hour",
          "available"
        ],
        "title": "GPUAvailabilityInfo"
      },
      "GetVoicesOut": {
        "properties": {
          "voices": {
            "items": {
              "$ref": "#/components/schemas/Voice"
            },
            "type": "array",
            "title": "Voices"
          }
        },
        "type": "object",
        "title": "GetVoicesOut"
      },
      "HFModel": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "Model Id from huggingface",
            "example": "google/vit-base-patch16-224"
          },
          "task": {
            "title": "Task",
            "description": "Task",
            "type": "string",
            "nullable": true,
            "example": "image-classification"
          }
        },
        "type": "object",
        "required": [
          "model_name"
        ],
        "title": "HFModel"
      },
      "HFTasksE": {
        "type": "string",
        "enum": [
          "automatic-speech-recognition",
          "image-classification",
          "question-answering",
          "token-classification",
          "text-to-image",
          "fill-mask",
          "zero-shot-image-classification",
          "text2text-generation",
          "text-generation",
          "text-classification",
          "object-detection",
          "embeddings",
          "dreambooth",
          "custom",
          "text-to-speech",
          "text-to-video"
        ],
        "title": "HFTasksE"
      },
      "HFWeights": {
        "properties": {
          "repo": {
            "type": "string",
            "title": "Repo",
            "description": "huggingface repository i.e username/reponame"
          },
          "revision": {
            "title": "Revision",
            "description": "commit sha or branch name",
            "type": "string",
            "nullable": true
          },
          "token": {
            "title": "Token",
            "description": "huggingface access token with read access to the repo",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "repo"
        ],
        "title": "HFWeights"
      },
      "ImageURL": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          },
          "detail": {
            "type": "string",
            "enum": [
              "auto",
              "low",
              "high"
            ],
            "title": "Detail",
            "default": "auto"
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "ImageURL"
      },
      "InputAudio": {
        "properties": {
          "data": {
            "type": "string",
            "title": "Data"
          },
          "format": {
            "type": "string",
            "enum": [
              "wav",
              "mp3"
            ],
            "title": "Format",
            "default": "wav"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "InputAudio"
      },
      "InspectScopedJWTOut": {
        "properties": {
          "expires_at": {
            "type": "integer",
            "title": "Expires At",
            "description": "unix timestamp of when the token expires"
          },
          "models": {
            "title": "Models",
            "description": "which models is the token limited to",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "spending_limit": {
            "title": "Spending Limit",
            "description": "how much is the total spending limit set at creation",
            "type": "number",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "expires_at"
        ],
        "title": "InspectScopedJWTOut"
      },
      "LLMDeploymentStatsOut": {
        "properties": {
          "requests": {
            "type": "integer",
            "title": "Requests",
            "description": "number of inference requests in the provided interval"
          },
          "input_tokens": {
            "type": "integer",
            "title": "Input Tokens",
            "description": "number of input tokens generated"
          },
          "output_tokens": {
            "type": "integer",
            "title": "Output Tokens",
            "description": "number of output tokens generated"
          },
          "avg_ttft_ms": {
            "type": "number",
            "title": "Avg Ttft Ms",
            "description": "average millisecond time to first token"
          },
          "avg95_ttft_ms": {
            "type": "number",
            "title": "Avg95 Ttft Ms",
            "description": "95th percentile time to first token (estimated)"
          },
          "avg_tpt_ms": {
            "type": "number",
            "title": "Avg Tpt Ms",
            "description": "average millisecond time per token"
          },
          "avg95_tpt_ms": {
            "type": "number",
            "title": "Avg95 Tpt Ms",
            "description": "95th percentile time per token (estimated)"
          },
          "total_amount_cents": {
            "type": "integer",
            "title": "Total Amount Cents",
            "description": "total number of cents spent"
          },
          "errors": {
            "type": "integer",
            "title": "Errors",
            "description": "number of errors"
          }
        },
        "type": "object",
        "required": [
          "requests",
          "input_tokens",
          "output_tokens",
          "avg_ttft_ms",
          "avg95_ttft_ms",
          "avg_tpt_ms",
          "avg95_tpt_ms",
          "total_amount_cents",
          "errors"
        ],
        "title": "LLMDeploymentStatsOut"
      },
      "LogEntry": {
        "type": "array",
        "maxItems": 2,
        "minItems": 2,
        "items": {
          "type": "string",
          "title": "Ts",
          "description": "timestamp in fractional seconds since unix epoch (ns precision)"
        }
      },
      "LogQueryOut": {
        "properties": {
          "entries": {
            "items": {
              "$ref": "#/components/schemas/LogEntry"
            },
            "type": "array",
            "title": "Entries",
            "description": "list of log lines ordered by increasing timestamp"
          }
        },
        "type": "object",
        "title": "LogQueryOut"
      },
      "LoraModelUploadIn": {
        "properties": {
          "hf_model_name": {
            "type": "string",
            "title": "Hf Model Name"
          },
          "hf_token": {
            "title": "Hf Token",
            "type": "string",
            "nullable": true
          },
          "lora_model_name": {
            "type": "string",
            "title": "Lora Model Name"
          },
          "base_model_name": {
            "title": "Base Model Name",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "hf_model_name",
          "lora_model_name"
        ],
        "title": "LoraModelUploadIn"
      },
      "Me": {
        "properties": {
          "uid": {
            "type": "string",
            "title": "Uid"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "nullable": true
          },
          "email_verified": {
            "type": "boolean",
            "title": "Email Verified"
          },
          "require_email_verified": {
            "type": "boolean",
            "title": "Require Email Verified",
            "default": false
          },
          "display_name": {
            "type": "string",
            "title": "Display Name",
            "description": "Name that is used to identifythe account on the website"
          },
          "provider": {
            "type": "string",
            "title": "Provider",
            "description": "Authentication provider, e.g. \u0027github\u0027"
          },
          "picture": {
            "title": "Picture",
            "type": "string",
            "nullable": true
          },
          "is_admin": {
            "type": "boolean",
            "title": "Is Admin"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Personal name"
          },
          "is_business_account": {
            "type": "boolean",
            "title": "Is Business Account"
          },
          "company": {
            "type": "string",
            "title": "Company",
            "description": "Company name"
          },
          "website": {
            "type": "string",
            "title": "Website",
            "description": "Company website address"
          },
          "is_team_account": {
            "type": "boolean",
            "title": "Is Team Account",
            "default": false
          },
          "is_team_owner": {
            "type": "boolean",
            "title": "Is Team Owner",
            "default": false
          },
          "team_role": {
            "title": "Team Role",
            "type": "string",
            "nullable": true
          },
          "team_display_name": {
            "title": "Team Display Name",
            "type": "string",
            "nullable": true
          },
          "is_team_upgrade_enabled": {
            "type": "boolean",
            "title": "Is Team Upgrade Enabled",
            "default": true
          },
          "vercel_connection": {
            "type": null,
            "nullable": true,
            "$ref": "#/components/schemas/MeVercelConnection"
          }
        },
        "type": "object",
        "required": [
          "uid",
          "email",
          "email_verified",
          "display_name",
          "provider",
          "picture",
          "is_admin",
          "name",
          "is_business_account",
          "company",
          "website"
        ],
        "title": "Me"
      },
      "MeIn": {
        "properties": {
          "name": {
            "title": "Name",
            "description": "Personal name",
            "type": "string",
            "nullable": true,
            "minLength": 1
          },
          "email": {
            "title": "Email",
            "type": "string",
            "nullable": true,
            "minLength": 1
          },
          "is_business_account": {
            "title": "Is Business Account",
            "type": "boolean",
            "nullable": true
          },
          "company": {
            "title": "Company",
            "description": "Company name",
            "type": "string",
            "nullable": true,
            "minLength": 1
          },
          "website": {
            "title": "Website",
            "description": "Company website address",
            "type": "string",
            "nullable": true,
            "minLength": 1
          },
          "display_name": {
            "title": "Display Name",
            "description": "String with length between 1 and 39 characters. Only alphanumeric characters and dashes allowed. Must contain no leading, trailing or consecutive dashes.",
            "type": "string",
            "nullable": true,
            "maxLength": 39,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9]\u002B(-[a-zA-Z0-9]\u002B)*$"
          }
        },
        "type": "object",
        "title": "MeIn"
      },
      "MeVercelConnection": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "team_id": {
            "title": "Team Id",
            "type": "string",
            "nullable": true
          },
          "installation_id": {
            "type": "string",
            "title": "Installation Id"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "installation_id"
        ],
        "title": "MeVercelConnection"
      },
      "ModelDocBlock": {
        "properties": {
          "key": {
            "$ref": "#/components/schemas/ModelDocBlockKey"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "key",
          "url"
        ],
        "title": "ModelDocBlock"
      },
      "ModelDocBlockKey": {
        "type": "string",
        "enum": [
          "http",
          "http-bge-m3-multimodal",
          "deepctl",
          "js-text-gen",
          "js-emb",
          "js-text-to-img",
          "js-speech-to-text",
          "openai-python",
          "openai-http",
          "openai-js",
          "openai-speech-http",
          "openai-speech-python",
          "openai-speech-js",
          "openai-images-http",
          "openai-images-python",
          "openai-images-js",
          "openai-images-variations-http",
          "openai-images-variations-python",
          "openai-images-variations-js",
          "openai-comp-python",
          "openai-comp-http",
          "openai-comp-js",
          "openai-emb-py",
          "openai-emb-http",
          "openai-emb-js",
          "openai-tts-http",
          "openai-tts-python",
          "openai-tts-js",
          "elevenlabs-tts-http",
          "elevenlabs-tts-python",
          "elevenlabs-tts-js",
          "create-voice-http",
          "create-voice-python",
          "create-voice-js",
          "read-voice-http",
          "read-voice-python",
          "read-voice-js",
          "update-voice-http",
          "update-voice-python",
          "update-voice-js",
          "delete-voice-http",
          "delete-voice-python",
          "delete-voice-js",
          "list-voices-http",
          "list-voices-python",
          "list-voices-js",
          "ai-sdk-js"
        ],
        "title": "ModelDocBlockKey"
      },
      "ModelFieldInfo": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "parent": {
            "title": "Parent",
            "type": "string",
            "nullable": true
          },
          "ftype": {
            "type": "string",
            "title": "Ftype"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "nullable": true
          },
          "allowed": {
            "title": "Allowed",
            "type": "array",
            "nullable": true,
            "items": {}
          },
          "default": {
            "title": "Default"
          },
          "examples": {
            "items": {},
            "type": "array",
            "title": "Examples",
            "default": []
          },
          "minimum": {
            "title": "Exclusiveminimum",
            "type": "number",
            "nullable": true
          },
          "exclusiveMinimum": true,
          "maximum": {
            "title": "Exclusivemaximum",
            "type": "number",
            "nullable": true
          },
          "exclusiveMaximum": true
        },
        "type": "object",
        "required": [
          "name",
          "ftype"
        ],
        "title": "ModelFieldInfo"
      },
      "ModelInfoOut": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "reported_type": {
            "type": "string",
            "title": "Reported Type"
          },
          "version": {
            "type": "string",
            "title": "Version"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "nullable": true
          },
          "featured": {
            "type": "boolean",
            "title": "Featured"
          },
          "owner": {
            "type": "boolean",
            "title": "Owner",
            "default": false
          },
          "public": {
            "type": "boolean",
            "title": "Public"
          },
          "curl_inv": {
            "type": "string",
            "title": "Curl Inv"
          },
          "cmdline_inv": {
            "type": "string",
            "title": "Cmdline Inv"
          },
          "txt_docs": {
            "type": "string",
            "title": "Txt Docs"
          },
          "out_example": {
            "type": "string",
            "title": "Out Example"
          },
          "out_docs": {
            "type": "string",
            "title": "Out Docs"
          },
          "mask_token": {
            "title": "Mask Token",
            "type": "string",
            "nullable": true
          },
          "in_schema": {
            "title": "In Schema"
          },
          "out_schema": {
            "title": "Out Schema"
          },
          "in_fields": {
            "title": "In Fields",
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ModelFieldInfo"
            }
          },
          "pricing": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelPricingTime"
              },
              {
                "$ref": "#/components/schemas/ModelPricingUptime"
              },
              {
                "$ref": "#/components/schemas/ModelPricingTokens"
              },
              {
                "$ref": "#/components/schemas/ModelPricingInputLength"
              },
              {
                "$ref": "#/components/schemas/ModelPricingInputTokens"
              },
              {
                "$ref": "#/components/schemas/ModelPricingInputCharacterLength"
              },
              {
                "$ref": "#/components/schemas/ModelPricingImageUnits"
              }
            ],
            "title": "Pricing"
          },
          "doc_blocks": {
            "title": "Doc Blocks",
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ModelDocBlock"
            }
          },
          "schemas": {
            "items": {
              "$ref": "#/components/schemas/SchemaVariant"
            },
            "type": "array",
            "title": "Schemas"
          },
          "meta": {
            "type": "object",
            "title": "Meta",
            "default": {}
          },
          "max_tokens": {
            "title": "Max Tokens",
            "type": "integer",
            "nullable": true
          },
          "replaced_by": {
            "title": "Replaced By",
            "type": "string",
            "nullable": true
          },
          "deprecated": {
            "title": "Deprecated",
            "type": "integer",
            "nullable": true
          },
          "quantization": {
            "title": "Quantization",
            "type": "string",
            "nullable": true
          },
          "mmlu": {
            "title": "Mmlu",
            "type": "number",
            "nullable": true
          },
          "expected": {
            "title": "Expected",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "model_name",
          "type",
          "tags",
          "reported_type",
          "version",
          "featured",
          "public",
          "curl_inv",
          "cmdline_inv",
          "txt_docs",
          "out_example",
          "out_docs",
          "pricing",
          "schemas"
        ],
        "title": "ModelInfoOut"
      },
      "ModelMetaIn": {
        "properties": {
          "description": {
            "title": "Description",
            "description": "short model description in plain text",
            "type": "string",
            "nullable": true
          },
          "github_url": {
            "title": "Github Url",
            "description": "source code project link (empty to delete)",
            "type": "string",
            "nullable": true
          },
          "paper_url": {
            "title": "Paper Url",
            "description": "paper/research link (empty to delete)",
            "type": "string",
            "nullable": true
          },
          "license_url": {
            "title": "License Url",
            "description": "usage license link (empty to delete)",
            "type": "string",
            "nullable": true
          },
          "readme": {
            "title": "Readme",
            "description": "markdown flavored model readme",
            "type": "string",
            "nullable": true
          },
          "cover_img_url": {
            "title": "Cover Img Url",
            "description": "dataurl or regular url to cover image (empty to delete)",
            "type": "string",
            "nullable": true
          },
          "reported_type": {
            "description": "model type",
            "type": null,
            "nullable": true,
            "$ref": "#/components/schemas/HFTasksE"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "ModelMetaIn"
      },
      "ModelOut": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "Model Name",
            "example": "microsoft/resnet-50"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "raw type of the model",
            "example": "image-classification"
          },
          "reported_type": {
            "type": "string",
            "title": "Reported Type",
            "description": "reported type of the model",
            "example": "text-generation"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "description of the model",
            "default": "",
            "example": "ResNet-50 is a convolutional neural network that is trained on more than a million images from the ImageNet database. It is a 50-layer deep neural network."
          },
          "cover_img_url": {
            "type": "string",
            "title": "Cover Img Url",
            "description": "cover image link",
            "default": ""
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "list of tags"
          },
          "pricing": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelPricingTime"
              },
              {
                "$ref": "#/components/schemas/ModelPricingTokens"
              },
              {
                "$ref": "#/components/schemas/ModelPricingInputLength"
              },
              {
                "$ref": "#/components/schemas/ModelPricingInputTokens"
              },
              {
                "$ref": "#/components/schemas/ModelPricingUptime"
              },
              {
                "$ref": "#/components/schemas/ModelPricingInputCharacterLength"
              },
              {
                "$ref": "#/components/schemas/ModelPricingImageUnits"
              }
            ],
            "title": "Pricing",
            "description": "The pricing type and cost for this model"
          },
          "max_tokens": {
            "title": "Max Tokens",
            "description": "The maximum context size of this model, if applicable",
            "type": "integer",
            "nullable": true
          },
          "replaced_by": {
            "title": "Replaced By",
            "type": "string",
            "nullable": true
          },
          "deprecated": {
            "title": "Deprecated",
            "type": "integer",
            "nullable": true
          },
          "quantization": {
            "title": "Quantization",
            "type": "string",
            "nullable": true
          },
          "mmlu": {
            "title": "Mmlu",
            "type": "number",
            "nullable": true
          },
          "expected": {
            "title": "Expected",
            "type": "string",
            "nullable": true
          },
          "private": {
            "type": "integer",
            "title": "Private",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "model_name",
          "type",
          "reported_type",
          "pricing"
        ],
        "title": "ModelOut"
      },
      "ModelPricingImageUnits": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "image_units"
          },
          "cents_per_image_unit": {
            "type": "number",
            "title": "Cents Per Image Unit"
          },
          "default_width": {
            "type": "integer",
            "title": "Default Width"
          },
          "default_height": {
            "type": "integer",
            "title": "Default Height"
          },
          "default_iterations": {
            "type": "integer",
            "title": "Default Iterations"
          }
        },
        "type": "object",
        "required": [
          "cents_per_image_unit",
          "default_width",
          "default_height",
          "default_iterations"
        ],
        "title": "ModelPricingImageUnits"
      },
      "ModelPricingInputCharacterLength": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "input_character_length"
          },
          "cents_per_input_chars": {
            "type": "number",
            "title": "Cents Per Input Chars"
          }
        },
        "type": "object",
        "required": [
          "cents_per_input_chars"
        ],
        "title": "ModelPricingInputCharacterLength"
      },
      "ModelPricingInputLength": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "input_length"
          },
          "cents_per_input_sec": {
            "type": "number",
            "title": "Cents Per Input Sec"
          }
        },
        "type": "object",
        "required": [
          "cents_per_input_sec"
        ],
        "title": "ModelPricingInputLength"
      },
      "ModelPricingInputTokens": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "input_tokens"
          },
          "cents_per_input_token": {
            "type": "number",
            "title": "Cents Per Input Token"
          }
        },
        "type": "object",
        "required": [
          "cents_per_input_token"
        ],
        "title": "ModelPricingInputTokens"
      },
      "ModelPricingTime": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "time"
          },
          "cents_per_sec": {
            "type": "number",
            "title": "Cents Per Sec"
          }
        },
        "type": "object",
        "required": [
          "cents_per_sec"
        ],
        "title": "ModelPricingTime"
      },
      "ModelPricingTokens": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "tokens"
          },
          "cents_per_input_token": {
            "type": "number",
            "title": "Cents Per Input Token"
          },
          "cents_per_output_token": {
            "type": "number",
            "title": "Cents Per Output Token"
          }
        },
        "type": "object",
        "required": [
          "cents_per_input_token",
          "cents_per_output_token"
        ],
        "title": "ModelPricingTokens"
      },
      "ModelPricingUptime": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "uptime"
          },
          "cents_per_sec": {
            "type": "number",
            "title": "Cents Per Sec"
          }
        },
        "type": "object",
        "required": [
          "cents_per_sec"
        ],
        "title": "ModelPricingUptime"
      },
      "ModelProvider": {
        "type": "string",
        "enum": [
          "huggingface",
          "deepinfra",
          "cnt"
        ],
        "title": "ModelProvider"
      },
      "ModelPublicityIn": {
        "properties": {
          "public": {
            "type": "boolean",
            "title": "Public",
            "description": "whether to make the model public of private"
          }
        },
        "type": "object",
        "required": [
          "public"
        ],
        "title": "ModelPublicityIn"
      },
      "ModelVersionOut": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "Model Name",
            "example": "microsoft/resnet-50"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Version identifier",
            "example": "06dbf5f73be4b5eca79e137e00c4825f467cd5b172c64b6c9255dc4b5a25a03a"
          },
          "uploaded_at": {
            "type": "string",
            "title": "Uploaded At",
            "description": "Upload time",
            "example": "2023-01-19T21:52:03.626241\u002B00:00"
          }
        },
        "type": "object",
        "required": [
          "model_name",
          "version",
          "uploaded_at"
        ],
        "title": "ModelVersionOut"
      },
      "OpenAIBatch": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "title": "Object"
          },
          "endpoint": {
            "type": "string",
            "title": "Endpoint"
          },
          "errors": {
            "title": "Errors",
            "type": "object",
            "nullable": true
          },
          "input_file_id": {
            "type": "string",
            "title": "Input File Id"
          },
          "completion_window": {
            "type": "string",
            "title": "Completion Window"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "output_file_id": {
            "title": "Output File Id",
            "type": "string",
            "nullable": true
          },
          "error_file_id": {
            "title": "Error File Id",
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "integer",
            "title": "Created At"
          },
          "in_progress_at": {
            "title": "In Progress At",
            "type": "integer",
            "nullable": true
          },
          "completed_at": {
            "title": "Completed At",
            "type": "integer",
            "nullable": true
          },
          "failed_at": {
            "title": "Failed At",
            "type": "integer",
            "nullable": true
          },
          "finalizing_at": {
            "title": "Finalizing At",
            "type": "integer",
            "nullable": true
          },
          "expires_at": {
            "type": "integer",
            "title": "Expires At"
          },
          "expired_at": {
            "title": "Expired At",
            "type": "integer",
            "nullable": true
          },
          "cancelled_at": {
            "title": "Cancelled At",
            "type": "integer",
            "nullable": true
          },
          "cancelling_at": {
            "title": "Cancelling At",
            "type": "integer",
            "nullable": true
          },
          "request_counts": {
            "title": "Request Counts",
            "type": "object",
            "nullable": true
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "object",
          "endpoint",
          "input_file_id",
          "completion_window",
          "status",
          "created_at",
          "expires_at"
        ],
        "title": "OpenAIBatch"
      },
      "OpenAIBatchesIn": {
        "properties": {
          "input_file_id": {
            "type": "string",
            "title": "Input File Id",
            "description": "The ID of an uploaded file that contains requests for the new batch."
          },
          "endpoint": {
            "type": "string",
            "enum": [
              "/v1/chat/completions",
              "/v1/completions"
            ],
            "title": "Endpoint",
            "description": "The endpoint to be used for all requests in the batch. Currently /v1/chat/completions, /v1/completions are supported."
          },
          "completion_window": {
            "type": "string",
            "title": "Completion Window",
            "description": "The time frame within which the batch should be processed. Currently only 24h is supported.",
            "enum": [
              "24h"
            ]
          },
          "metadata": {
            "title": "Metadata",
            "description": "Optional metadata to be stored with the batch.",
            "type": "object",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "input_file_id",
          "endpoint",
          "completion_window",
          "metadata"
        ],
        "title": "OpenAIBatchesIn"
      },
      "OpenAIChatCompletionsIn": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "model name",
            "example": "meta-llama/Llama-2-70b-chat-hf"
          },
          "messages": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ChatCompletionToolMessage"
                },
                {
                  "$ref": "#/components/schemas/ChatCompletionAssistantMessage"
                },
                {
                  "$ref": "#/components/schemas/ChatCompletionUserMessage"
                },
                {
                  "$ref": "#/components/schemas/ChatCompletionSystemMessage"
                }
              ]
            },
            "type": "array",
            "title": "Messages",
            "description": "conversation messages: (user,assistant,tool)*,user including one system message anywhere"
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "description": "whether to stream the output via SSE or return the full response",
            "default": false
          },
          "temperature": {
            "type": "number",
            "maximum": 2.0,
            "minimum": 0.0,
            "title": "Temperature",
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic",
            "default": 1.0
          },
          "top_p": {
            "type": "number",
            "maximum": 1.0,
            "exclusiveMinimum": true,
            "title": "Top P",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.",
            "default": 1.0,
            "minimum": 0.0
          },
          "min_p": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Min P",
            "description": "Float that represents the minimum probability for a token to be considered, relative to the probability of the most likely token. Must be in [0, 1]. Set to 0 to disable this.",
            "default": 0.0
          },
          "top_k": {
            "type": "integer",
            "exclusiveMaximum": true,
            "minimum": 0.0,
            "title": "Top K",
            "description": "Sample from the best k (number of) tokens. 0 means off",
            "default": 0,
            "maximum": 1000.0
          },
          "max_tokens": {
            "title": "Max Tokens",
            "description": "The maximum number of tokens to generate in the chat completion.\n\nThe total length of input tokens and generated tokens is limited by the model\u0027s context length. If explicitly set to None it will be the model\u0027s max context length minus input length or 16384, whichever is smaller.",
            "type": "integer",
            "nullable": true,
            "maximum": 1000000.0,
            "minimum": 0.0
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Stop",
            "description": "up to 16 sequences where the API will stop generating further tokens",
            "nullable": true
          },
          "n": {
            "type": "integer",
            "maximum": 4.0,
            "minimum": 1.0,
            "title": "N",
            "description": "number of sequences to return",
            "default": 1
          },
          "presence_penalty": {
            "type": "number",
            "maximum": 2.0,
            "minimum": -2.0,
            "title": "Presence Penalty",
            "description": "Positive values penalize new tokens based on whether they appear in the text so far, increasing the model\u0027s likelihood to talk about new topics.",
            "default": 0
          },
          "frequency_penalty": {
            "type": "number",
            "maximum": 2.0,
            "minimum": -2.0,
            "title": "Frequency Penalty",
            "description": "Positive values penalize new tokens based on how many times they appear in the text so far, increasing the model\u0027s likelihood to talk about new topics.",
            "default": 0
          },
          "tools": {
            "title": "Tools",
            "description": "A list of tools the model may call. Currently, only functions are supported as a tool.",
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ChatTools"
            }
          },
          "tool_choice": {
            "title": "Tool Choice",
            "description": "Controls which (if any) function is called by the model. none means the model will not call a function and instead generates a message. auto means the model can pick between generating a message or calling a function. specifying a particular function choice is not supported currently.none is the default when no functions are present. auto is the default if functions are present.",
            "type": "string",
            "nullable": true
          },
          "response_format": {
            "description": "The format of the response. Currently, only json is supported.",
            "type": null,
            "nullable": true,
            "$ref": "#/components/schemas/ResponseFormat"
          },
          "repetition_penalty": {
            "type": "number",
            "maximum": 5.0,
            "minimum": 0.01,
            "title": "Repetition Penalty",
            "description": "Alternative penalty for repetition, but multiplicative instead of additive (\u003E 1 penalize, \u003C 1 encourage)",
            "default": 1
          },
          "user": {
            "title": "User",
            "description": "A unique identifier representing your end-user, which can help monitor and detect abuse. Avoid sending us any identifying information. We recommend hashing user identifiers.",
            "type": "string",
            "nullable": true
          },
          "seed": {
            "title": "Seed",
            "description": "Seed for random number generator. If not provided, a random seed is used. Determinism is not guaranteed.",
            "type": "integer",
            "nullable": true,
            "exclusiveMaximum": true,
            "minimum": -9.223372036854776e+18,
            "maximum": 1.8446744073709552e+19
          },
          "logprobs": {
            "title": "Logprobs",
            "description": "Whether to return log probabilities of the output tokens or not.If true, returns the log probabilities of each output token returned in the \u0060content\u0060 of \u0060message\u0060.",
            "type": "boolean",
            "nullable": true
          },
          "stream_options": {
            "description": "streaming options",
            "type": null,
            "nullable": true,
            "$ref": "#/components/schemas/StreamOptions"
          },
          "reasoning_effort": {
            "title": "Reasoning Effort",
            "description": "Constrains effort on reasoning for reasoning models. Currently supported values are none, low, medium, and high. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response. Setting to none disables reasoning entirely if the model supports.",
            "type": "string",
            "nullable": true,
            "enum": [
              "low",
              "medium",
              "high",
              "none"
            ]
          }
        },
        "type": "object",
        "required": [
          "model",
          "messages"
        ],
        "title": "OpenAIChatCompletionsIn"
      },
      "OpenAICompletionsIn": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "model name",
            "example": "meta-llama/Llama-2-70b-chat-hf"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt",
            "description": "input prompt - a single string is currently supported"
          },
          "max_tokens": {
            "title": "Max Tokens",
            "description": "The maximum number of tokens to generate in the completion.\n\nThe total length of input tokens and generated tokens is limited by the model\u0027s context length.If explicitly set to None it will be the model\u0027s max context length minus input length or 16384, whichever is smaller.",
            "type": "integer",
            "nullable": true,
            "maximum": 1000000.0,
            "exclusiveMinimum": true,
            "minimum": 0.0
          },
          "temperature": {
            "type": "number",
            "maximum": 2.0,
            "minimum": 0.0,
            "title": "Temperature",
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic",
            "default": 1.0
          },
          "top_p": {
            "type": "number",
            "maximum": 1.0,
            "exclusiveMinimum": true,
            "title": "Top P",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.",
            "default": 1.0,
            "minimum": 0.0
          },
          "min_p": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Min P",
            "description": "Float that represents the minimum probability for a token to be considered, relative to the probability of the most likely token. Must be in [0, 1]. Set to 0 to disable this.",
            "default": 0.0
          },
          "top_k": {
            "type": "integer",
            "exclusiveMaximum": true,
            "minimum": 0.0,
            "title": "Top K",
            "description": "Sample from the best k (number of) tokens. 0 means off",
            "default": 0,
            "maximum": 1000.0
          },
          "n": {
            "type": "integer",
            "maximum": 4.0,
            "minimum": 1.0,
            "title": "N",
            "description": "number of sequences to return",
            "default": 1
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "description": "whether to stream the output via SSE or return the full response",
            "default": false
          },
          "logprobs": {
            "title": "Logprobs",
            "description": "return top tokens and their log-probabilities",
            "type": "integer",
            "nullable": true
          },
          "echo": {
            "title": "Echo",
            "description": "return prompt as part of the respons",
            "type": "boolean",
            "nullable": true
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Stop",
            "description": "up to 16 sequences where the API will stop generating further tokens",
            "nullable": true
          },
          "presence_penalty": {
            "type": "number",
            "maximum": 2.0,
            "minimum": -2.0,
            "title": "Presence Penalty",
            "description": "Positive values penalize new tokens based on whether they appear in the text so far, increasing the model\u0027s likelihood to talk about new topics.",
            "default": 0
          },
          "frequency_penalty": {
            "type": "number",
            "maximum": 2.0,
            "minimum": -2.0,
            "title": "Frequency Penalty",
            "description": "Positive values penalize new tokens based on how many times they appear in the text so far, increasing the model\u0027s likelihood to talk about new topics.",
            "default": 0
          },
          "response_format": {
            "description": "The format of the response. Currently, only json is supported.",
            "type": null,
            "nullable": true,
            "$ref": "#/components/schemas/ResponseFormat"
          },
          "repetition_penalty": {
            "type": "number",
            "maximum": 5.0,
            "minimum": 0.01,
            "title": "Repetition Penalty",
            "description": "Alternative penalty for repetition, but multiplicative instead of additive (\u003E 1 penalize, \u003C 1 encourage)",
            "default": 1
          },
          "user": {
            "title": "User",
            "description": "A unique identifier representing your end-user, which can help  monitor and detect abuse. Avoid sending us any identifying information. We recommend hashing user identifiers.",
            "type": "string",
            "nullable": true
          },
          "seed": {
            "title": "Seed",
            "description": "Seed for random number generator. If not provided, a random seed is used. Determinism is not guaranteed.",
            "type": "integer",
            "nullable": true,
            "exclusiveMaximum": true,
            "minimum": -9.223372036854776e+18,
            "maximum": 1.8446744073709552e+19
          },
          "stream_options": {
            "description": "streaming options",
            "type": null,
            "nullable": true,
            "$ref": "#/components/schemas/StreamOptions"
          }
        },
        "type": "object",
        "required": [
          "model",
          "prompt"
        ],
        "title": "OpenAICompletionsIn"
      },
      "OpenAIEmbeddingsIn": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "model name",
            "example": "thenlper/gte-large"
          },
          "input": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "maxLength": 1024,
            "title": "Input",
            "description": "sequences to embed",
            "soft_required": true,
            "example": [
              "I like chocolate"
            ]
          },
          "encoding_format": {
            "type": "string",
            "title": "Encoding Format",
            "description": "format used when encoding",
            "default": "float",
            "enum": [
              "float"
            ]
          }
        },
        "type": "object",
        "required": [
          "model",
          "input"
        ],
        "title": "OpenAIEmbeddingsIn"
      },
      "OpenAIImageData": {
        "properties": {
          "b64_json": {
            "type": "string",
            "title": "B64 Json",
            "description": "The base64-encoded image data"
          },
          "revised_prompt": {
            "title": "Revised Prompt",
            "description": "The prompt used to generate this image",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "b64_json"
        ],
        "title": "OpenAIImageData"
      },
      "OpenAIImagesOut": {
        "properties": {
          "created": {
            "type": "integer",
            "title": "Created",
            "description": "Unix timestamp of when the images were created"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/OpenAIImageData"
            },
            "type": "array",
            "title": "Data",
            "description": "List of generated images"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "OpenAIImagesOut"
      },
      "OpenAIModelOut": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "model"
          },
          "created": {
            "type": "integer",
            "title": "Created"
          },
          "owned_by": {
            "type": "string",
            "title": "Owned By"
          },
          "root": {
            "type": "string",
            "title": "Root"
          },
          "parent": {
            "type": "null",
            "title": "Parent"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created",
          "owned_by",
          "root"
        ],
        "title": "OpenAIModelOut"
      },
      "OpenAIModelsOut": {
        "properties": {
          "object": {
            "type": "string",
            "title": "Object",
            "default": "list"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/OpenAIModelOut"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "title": "OpenAIModelsOut"
      },
      "OpenAITextToSpeechIn": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "model name",
            "example": "deepinfra/tts"
          },
          "input": {
            "type": "string",
            "title": "Input",
            "description": "Text to convert to speech",
            "example": "I\u0027m beginnin\u0027 to feel like a Rap God, Rap God\nAll my people from the front to the back nod, back nod\nNow, who thinks their arms are long enough to slap box, slap box?\nThey said I rap like a robot, so call me Rap-bot"
          },
          "voice": {
            "title": "Voice",
            "description": "Preset voices to use for the speech.",
            "type": "string",
            "nullable": true
          },
          "response_format": {
            "$ref": "#/components/schemas/TtsResponseFormat",
            "description": "response format for the speech",
            "default": "wav"
          },
          "speed": {
            "type": "number",
            "maximum": 4.0,
            "minimum": 0.25,
            "title": "Speed",
            "description": "speed of the speech",
            "default": 1.0
          },
          "extra_body": {
            "title": "Extra Body",
            "description": "Extra body parameters for the model.",
            "type": "object",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "model",
          "input"
        ],
        "title": "OpenAITextToSpeechIn"
      },
      "RateLimitOut": {
        "properties": {
          "rate_limit": {
            "type": "integer",
            "title": "Rate Limit",
            "description": "Per model rate limit"
          }
        },
        "type": "object",
        "required": [
          "rate_limit"
        ],
        "title": "RateLimitOut"
      },
      "RateLimitRequestIn": {
        "properties": {
          "rate_limit": {
            "type": "integer",
            "title": "Rate Limit"
          },
          "reason": {
            "type": "string",
            "maxLength": 2048,
            "title": "Reason"
          }
        },
        "type": "object",
        "required": [
          "rate_limit",
          "reason"
        ],
        "title": "RateLimitRequestIn"
      },
      "ResponseFormat": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text",
              "json_object"
            ],
            "title": "Type",
            "default": "text"
          }
        },
        "type": "object",
        "title": "ResponseFormat"
      },
      "ScaleSettings": {
        "properties": {
          "min_instances": {
            "type": "integer",
            "title": "Min Instances",
            "description": "Minimum number of model instances to run",
            "default": 1
          },
          "max_instances": {
            "type": "integer",
            "title": "Max Instances",
            "description": "Maximum number of model instances to run",
            "default": 1
          }
        },
        "type": "object",
        "title": "ScaleSettings"
      },
      "SchemaOut": {
        "properties": {
          "variant": {
            "$ref": "#/components/schemas/SchemaVariant"
          },
          "schema_in": {
            "title": "Schema In",
            "type": "object",
            "nullable": true
          },
          "schema_out": {
            "title": "Schema Out",
            "type": "object",
            "nullable": true
          },
          "schema_stream": {
            "title": "Schema Stream",
            "type": "object",
            "nullable": true
          },
          "fields_in": {
            "items": {
              "$ref": "#/components/schemas/ModelFieldInfo"
            },
            "type": "array",
            "title": "Fields In"
          }
        },
        "type": "object",
        "required": [
          "variant",
          "fields_in"
        ],
        "title": "SchemaOut"
      },
      "SchemaVariant": {
        "properties": {
          "key": {
            "$ref": "#/components/schemas/SchemaVariantKey"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "key",
          "url"
        ],
        "title": "SchemaVariant"
      },
      "SchemaVariantKey": {
        "type": "string",
        "enum": [
          "default",
          "openai-completions",
          "openai-chat-completions",
          "openai-embeddings",
          "openai-speech-to-text",
          "openai-tts",
          "openai-images",
          "openai-images-variations",
          "elevenlabs-tts",
          "create-voice",
          "read-voice",
          "update-voice",
          "delete-voice",
          "list-voices",
          "ai-sdk"
        ],
        "title": "SchemaVariantKey"
      },
      "ScopedJWTIn": {
        "properties": {
          "api_token_name": {
            "type": "string",
            "title": "Api Token Name"
          },
          "models": {
            "title": "Models",
            "description": "allow inference only to the specified model names",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "expires_delta": {
            "title": "Expires Delta",
            "description": "how many seconds in the future should the token be valid for",
            "type": "integer",
            "nullable": true
          },
          "expires_at": {
            "title": "Expires At",
            "description": "unix timestamp when the token should expire",
            "type": "integer",
            "nullable": true
          },
          "spending_limit": {
            "title": "Spending Limit",
            "description": "only allow spending that much USD until the token becomes invalid",
            "type": "number",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "api_token_name"
        ],
        "title": "ScopedJWTIn"
      },
      "ScopedJWTOut": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token",
            "description": "The newly minted scoped JWT ready for use"
          }
        },
        "type": "object",
        "required": [
          "token"
        ],
        "title": "ScopedJWTOut"
      },
      "SourceModel": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SourceTypeEnum"
          },
          "civit_url": {
            "title": "Civit Url",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "SourceModel"
      },
      "SourceTypeEnum": {
        "type": "string",
        "enum": [
          "civitai"
        ],
        "title": "SourceTypeEnum"
      },
      "StreamOptions": {
        "properties": {
          "include_usage": {
            "type": "boolean",
            "title": "Include Usage",
            "description": "whether to include usage data",
            "default": true
          },
          "continuous_usage_stats": {
            "type": "boolean",
            "title": "Continuous Usage Stats",
            "description": "whether to include usage stats continuously with each streaming event",
            "default": false
          }
        },
        "type": "object",
        "title": "StreamOptions"
      },
      "TimeDeploymentStatsOut": {
        "properties": {
          "requests": {
            "type": "integer",
            "title": "Requests",
            "description": "number of inference requests in the provided interval"
          },
          "total_time_s": {
            "type": "integer",
            "title": "Total Time S",
            "description": "total number of seconds spend in inference"
          },
          "total_amount_cents": {
            "type": "integer",
            "title": "Total Amount Cents",
            "description": "total number of cents spent"
          },
          "avg_time_ms": {
            "type": "number",
            "title": "Avg Time Ms",
            "description": "average millisecond inference time"
          },
          "avg95_time_ms": {
            "type": "number",
            "title": "Avg95 Time Ms",
            "description": "95th percentile inference time (estimated)"
          },
          "errors": {
            "type": "integer",
            "title": "Errors",
            "description": "number of errors"
          }
        },
        "type": "object",
        "required": [
          "requests",
          "total_time_s",
          "total_amount_cents",
          "avg_time_ms",
          "avg95_time_ms",
          "errors"
        ],
        "title": "TimeDeploymentStatsOut"
      },
      "TtsResponseFormat": {
        "type": "string",
        "enum": [
          "mp3",
          "opus",
          "flac",
          "wav",
          "pcm"
        ],
        "title": "TtsResponseFormat",
        "description": "Select the desired format for the speech output. Supported formats include mp3, opus, flac, wav, and pcm.",
        "default": "wav",
        "example": "mp3"
      },
      "UpdateLoraApiRequest": {
        "properties": {
          "private": {
            "title": "Private",
            "type": "boolean",
            "nullable": true
          },
          "description": {
            "title": "Description",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateLoraApiRequest"
      },
      "Voice": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "voice_id": {
            "type": "string",
            "title": "Voice Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "default": ""
          },
          "created_at": {
            "type": "integer",
            "title": "Created At"
          },
          "updated_at": {
            "type": "integer",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "voice_id",
          "name"
        ],
        "title": "Voice"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}